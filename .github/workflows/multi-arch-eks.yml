name: Test multi-arch EKS Cluster
on:
  schedule:
    - cron: "0 7 * * *" ## Every day at 0700 UTC
  workflow_dispatch: ## Give us the ability to run this manually
  pull_request:

permissions:
  id-token: write
  contents: read

# Abort prior jobs in the same workflow / PR
concurrency:
  group: e2e-eks-multi-arch-${{ github.ref }}
  cancel-in-progress: true

jobs:
  eks-nightly-test:
    if: ${{ github.repository == 'zarf-dev/zarf' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup golang
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod

      - name: Build binary and zarf packages
        uses: ./.github/actions/packages

      - name: Auth with AWS
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.AWS_NIGHTLY_EKS_ROLE_ARN }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-east-1
          role-duration-seconds: 7200

      - name: Download eksctl
        run: |
          curl -L -o eksctl_Linux_amd64.tar.gz \
            https://github.com/weaveworks/eksctl/releases/download/v0.170.0/eksctl_Linux_amd64.tar.gz
          tar -xzf eksctl_Linux_amd64.tar.gz
          chmod +x eksctl

      - name: Create EKS config
        run: |
          cat <<EOF > eks.yaml
          # eksctl create cluster --config-file=eks.yaml
          apiVersion: eksctl.io/v1alpha5
          kind: ClusterConfig
          metadata:
            name: zarf-nightly-multi-arch-e2e-test
            region: us-east-1
            tags:
              PermissionsBoundary: uds_permissions_boundary

          iam:
            serviceRolePermissionsBoundary: arn:aws:iam::205930641482:policy/uds_permissions_boundary
            withOIDC: true

          addons:
            - name: aws-ebs-csi-driver
              attachPolicyARNs:
                - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
              permissionsBoundary: "arn:aws:iam::205930641482:policy/uds_permissions_boundary"
              tags:
                PermissionsBoundary: "uds_permissions_boundary"

            - name: vpc-cni
              attachPolicyARNs:
                - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
              permissionsBoundary: "arn:aws:iam::205930641482:policy/uds_permissions_boundary"
              tags:
                PermissionsBoundary: "uds_permissions_boundary"

          managedNodeGroups:
          - instanceType: t3.medium
            name: amd64-ng
            minSize: 2
            maxSize: 2
            spot: true
            tags:
              PermissionsBoundary: "uds_permissions_boundary"
            iam:
              instanceRolePermissionsBoundary: "arn:aws:iam::205930641482:policy/uds_permissions_boundary"
          - instanceType: "t4g.small"
            name: arm64-ng
            minSize: 2
            maxSize: 2
            spot: true
            tags:
              PermissionsBoundary: "uds_permissions_boundary"
            iam:
              instanceRolePermissionsBoundary: "arn:aws:iam::205930641482:policy/uds_permissions_boundary"
          EOF

      - name: create cluster
        run: |
          ./eksctl create cluster --dry-run --config-file eks.yaml
          ./eksctl create cluster --config-file=eks.yaml

      - name: init Zarf
        run: |
          ./build/zarf init --confirm

      - name: teardown cluster
        run: |
          ./eksctl delete cluster --config-file=eks.yaml --disable-nodegroup-eviction --wait
