name: Nightly CLI and Packages Build

on:
  schedule:
    - cron: "0 7 * * *" # Every day at 0700 UTC
  workflow_dispatch:

permissions:
  contents: read

env:
  # Global switch: only run jobs when executing in this repository
  UPSTREAM_REPO: zarf-dev/zarf

jobs:
  repo-gate:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [ "${{ github.repository }}" = "${{ env.UPSTREAM_REPO }}" ]; then
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          fi

  build-release:
    needs: repo-gate
    if: ${{ needs.repo-gate.outputs.should_run == 'true' }}
    runs-on: large-ubuntu-zarf-release
    permissions:
      id-token: write
      packages: write
    outputs:
      cli_version: ${{ steps.set-version.outputs.cli_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set CLI_VERSION
        id: set-version
        shell: bash
        run: |
          set -euo pipefail

          # Find the latest stable semver tag (ignores prereleases, nightly, etc.)
          LATEST_TAG="$(git tag --sort=-version:refname \
            | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' \
            | head -n1)"

          if [[ -z "${LATEST_TAG}" ]]; then
            echo "No stable tags found, defaulting to 0.0.0"
            LATEST_TAG="v0.0.0"
          fi

          PREFIX="${LATEST_TAG%%[0-9]*}"   # usually "v" or ""
          CORE="${LATEST_TAG#"$PREFIX"}"

          IFS='.' read -r MAJOR MINOR PATCH <<<"${CORE}"
          : "${MAJOR:=0}" ; : "${MINOR:=0}" ; : "${PATCH:=0}"

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}-nightly"
          NEW_TAG="${PREFIX}${NEW_VERSION}"

          echo "Computed nightly: ${NEW_TAG}"

          echo "cli_version=${NEW_TAG}" >> "$GITHUB_OUTPUT"
          echo "CLI_VERSION=${NEW_TAG}" >> "$GITHUB_ENV"

      - name: Setup golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Build CLI
        run: |
          CLI_VERSION=$CLI_VERSION make build-cli-linux-amd
          CLI_VERSION=$CLI_VERSION make build-cli-linux-arm

      - name: "Zarf Agent: Login to GHCR"
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: dummy
          password: ${{ github.token }}

      - name: Zarf Agent Build and Publish the Image
        run: |
          cp build/zarf build/zarf-linux-amd64
          cp build/zarf-arm build/zarf-linux-arm64
          docker buildx build --push --platform linux/arm64/v8,linux/amd64 \
            --tag ghcr.io/zarf-dev/zarf/agent:$CLI_VERSION .
          rm build/zarf-linux-amd64 build/zarf-linux-arm64
          echo ZARF_AGENT_IMAGE_DIGEST=$(docker buildx imagetools inspect ghcr.io/zarf-dev/zarf/agent:$CLI_VERSION --format '{{ json . }}' | jq -r .manifest.digest) >> $GITHUB_ENV

      - name: Auth with AWS
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_KMS_ROLE_ARN }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-east-1
          role-duration-seconds: 3600

      - name: Zarf Agent Sign the Image
        run: |
          cosign sign --key awskms:///${{ secrets.COSIGN_AWS_KMS_KEY_ARN }} \
            -a release-engineer=https://github.com/${{ github.actor }} \
            -a version=$CLI_VERSION \
            ghcr.io/zarf-dev/zarf/agent@$ZARF_AGENT_IMAGE_DIGEST -y
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Build Init Packages
        run: |
          make release-init-package ARCH=amd64 AGENT_IMAGE_TAG=$CLI_VERSION
          make release-init-package ARCH=arm64 AGENT_IMAGE_TAG=$CLI_VERSION

      - name: Publish Init Package as OCI and Skeleton
        run: |
          CLI_VERSION=$CLI_VERSION make publish-init-package ARCH=amd64 REPOSITORY_URL=ghcr.io/zarf-dev/packages
          CLI_VERSION=$CLI_VERSION make publish-init-package ARCH=arm64 REPOSITORY_URL=ghcr.io/zarf-dev/packages

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  validate-release:
    needs: [repo-gate, build-release]
    if: ${{ needs.repo-gate.outputs.should_run == 'true' }}
    runs-on: large-ubuntu-zarf-release
    env:
      CLI_VERSION: ${{ needs.build-release.outputs.cli_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: build-artifacts
          path: build/

      - name: Setup golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod

      - name: Make Zarf Executable
        run: chmod +x build/zarf

      - name: Build Examples and Run Tests
        run: |
          sudo env "PATH=$PATH" CI=true APPLIANCE_MODE=true CLI_VERSION=$CLI_VERSION make test-e2e ARCH=amd64

  create-release:
    needs: [repo-gate, build-release]
    if: ${{ needs.repo-gate.outputs.should_run == 'true' }}
    runs-on: large-ubuntu-zarf-release
    env:
      CLI_VERSION: ${{ needs.build-release.outputs.cli_version }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Download build artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: build-artifacts
          path: build/

      - name: Make Zarf Executable
        run: chmod +x build/zarf

      - name: Setup Release ENV Vars
        run: |
          K8S_MODULES_VER=$(go list -f '{{.Version}}' -m k8s.io/client-go | sed 's/v//; s/\./ /g')
          echo K8S_MODULES_MAJOR_VER=$(expr $(echo "$K8S_MODULES_VER" | cut -d " " -f 1) + 1) >> $GITHUB_ENV
          echo K8S_MODULES_MINOR_VER=$(echo "$K8S_MODULES_VER" | cut -d " " -f 2) >> $GITHUB_ENV
          echo K8S_MODULES_PATCH_VER=$(echo "$K8S_MODULES_VER" | cut -d " " -f 3) >> $GITHUB_ENV

          echo K9S_VERSION=$(go list -f '{{.Version}}' -m github.com/derailed/k9s) >> $GITHUB_ENV
          echo CRANE_VERSION=$(go list -f '{{.Version}}' -m github.com/google/go-containerregistry) >> $GITHUB_ENV
          echo SYFT_VERSION=$(go list -f '{{.Version}}' -m github.com/anchore/syft) >> $GITHUB_ENV
          echo ARCHIVES_VERSION=$(go list -f '{{.Version}}' -m github.com/mholt/archives) >> $GITHUB_ENV
          echo HELM_VERSION=$(go list -f '{{.Version}}' -m helm.sh/helm/v3) >> $GITHUB_ENV

      - name: Run GoReleaser (Nightly)
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean --verbose --nightly -f .goreleaser-pro.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Report Disk Space on Failure
        if: failure()
        run: |
          echo "create-release failed, printing out available diskspace"
          lsblk -f
