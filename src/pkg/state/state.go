// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2021-Present The Zarf Authors

// Package state manages references to a logical zarf deployment in k8s.
package state

import (
	"context"
	"fmt"
	"slices"

	"github.com/defenseunicorns/pkg/helpers/v2"
	"github.com/zarf-dev/zarf/src/api/v1alpha1"
	"github.com/zarf-dev/zarf/src/config"
	"github.com/zarf-dev/zarf/src/config/lang"
	"github.com/zarf-dev/zarf/src/pkg/logger"
	"github.com/zarf-dev/zarf/src/pkg/pki"
	"github.com/zarf-dev/zarf/src/types"
)

// Declares secrets and metadata keys and values.
// TODO(mkcp): Remove Zarf prefix, that's the project name.
// TODO(mkcp): Provide semantic doccomments for how these are used.
const (
	ZarfManagedByLabel   = "app.kubernetes.io/managed-by"
	ZarfNamespaceName    = "zarf"
	ZarfStateSecretName  = "zarf-state"
	ZarfStateDataKey     = "state"
	ZarfPackageInfoLabel = "package-deploy-info"
)

// Credential keys
// TODO(mkcp): Provide semantic doccomments for how these are used.
const (
	RegistryKey     = "registry"
	RegistryReadKey = "registry-readonly"
	GitKey          = "git"
	GitReadKey      = "git-readonly"
	ArtifactKey     = "artifact"
	AgentKey        = "agent"
)

// ComponentStatus defines the deployment status of a Zarf component within a package.
type ComponentStatus string

// All the different status options for a Zarf Component
const (
	ComponentStatusSucceeded ComponentStatus = "Succeeded"
	ComponentStatusFailed    ComponentStatus = "Failed"
	ComponentStatusDeploying ComponentStatus = "Deploying"
	ComponentStatusRemoving  ComponentStatus = "Removing"
)

// State is maintained as a secret in the Zarf namespace to track Zarf init data.
type State struct {
	// Indicates if Zarf was initialized while deploying its own k8s cluster
	ZarfAppliance bool `json:"zarfAppliance"`
	// K8s distribution of the cluster Zarf was deployed to
	Distro string `json:"distro"`
	// Machine architecture of the k8s node(s)
	Architecture string `json:"architecture"`
	// Default StorageClass value Zarf uses for variable templating
	StorageClass string `json:"storageClass"`
	// PKI certificate information for the agent pods Zarf manages
	AgentTLS pki.GeneratedPKI `json:"agentTLS"`

	// Information about the repository Zarf is configured to use
	GitServer types.GitServerInfo `json:"gitServer"`
	// Information about the container registry Zarf is configured to use
	RegistryInfo types.RegistryInfo `json:"registryInfo"`
	// Information about the artifact registry Zarf is configured to use
	ArtifactServer types.ArtifactServerInfo `json:"artifactServer"`
}

// Default returns a default State with default values filled in for the registry, git server, and artifact server
func Default() (*State, error) {
	state := &State{}
	err := state.GitServer.FillInEmptyValues()
	if err != nil {
		return nil, err
	}
	err = state.RegistryInfo.FillInEmptyValues()
	if err != nil {
		return nil, err
	}
	state.ArtifactServer.FillInEmptyValues()
	return state, nil
}

// MergeOptions tracks the user-defined options during cluster initialization.
// TODO(mkcp): Provide semantic doccomments for how exported fields are used.
type MergeOptions struct {
	GitServer      types.GitServerInfo
	RegistryInfo   types.RegistryInfo
	ArtifactServer types.ArtifactServerInfo
	Services       []string
}

// Merge merges init options for provided services into the provided state to create a new state struct
func Merge(oldState *State, opts MergeOptions) (*State, error) {
	newState := *oldState
	var err error
	if slices.Contains(opts.Services, RegistryKey) {
		// TODO: Replace use of reflections with explicit setting
		newState.RegistryInfo = helpers.MergeNonZero(newState.RegistryInfo, opts.RegistryInfo)

		// Set the new passwords if they should be autogenerated
		if newState.RegistryInfo.PushPassword == oldState.RegistryInfo.PushPassword && oldState.RegistryInfo.IsInternal() {
			if newState.RegistryInfo.PushPassword, err = helpers.RandomString(types.ZarfGeneratedPasswordLen); err != nil {
				return nil, fmt.Errorf("%s: %w", lang.ErrUnableToGenerateRandomSecret, err)
			}
		}
		if newState.RegistryInfo.PullPassword == oldState.RegistryInfo.PullPassword && oldState.RegistryInfo.IsInternal() {
			if newState.RegistryInfo.PullPassword, err = helpers.RandomString(types.ZarfGeneratedPasswordLen); err != nil {
				return nil, fmt.Errorf("%s: %w", lang.ErrUnableToGenerateRandomSecret, err)
			}
		}
	}
	if slices.Contains(opts.Services, GitKey) {
		// TODO: Replace use of reflections with explicit setting
		newState.GitServer = helpers.MergeNonZero(newState.GitServer, opts.GitServer)

		// Set the new passwords if they should be autogenerated
		if newState.GitServer.PushPassword == oldState.GitServer.PushPassword && oldState.GitServer.IsInternal() {
			if newState.GitServer.PushPassword, err = helpers.RandomString(types.ZarfGeneratedPasswordLen); err != nil {
				return nil, fmt.Errorf("%s: %w", lang.ErrUnableToGenerateRandomSecret, err)
			}
		}
		if newState.GitServer.PullPassword == oldState.GitServer.PullPassword && oldState.GitServer.IsInternal() {
			if newState.GitServer.PullPassword, err = helpers.RandomString(types.ZarfGeneratedPasswordLen); err != nil {
				return nil, fmt.Errorf("%s: %w", lang.ErrUnableToGenerateRandomSecret, err)
			}
		}
	}
	if slices.Contains(opts.Services, ArtifactKey) {
		// TODO: Replace use of reflections with explicit setting
		newState.ArtifactServer = helpers.MergeNonZero(newState.ArtifactServer, opts.ArtifactServer)

		// Set an empty token if it should be autogenerated
		if newState.ArtifactServer.PushToken == oldState.ArtifactServer.PushToken && oldState.ArtifactServer.IsInternal() {
			newState.ArtifactServer.PushToken = ""
		}
	}
	if slices.Contains(opts.Services, AgentKey) {
		agentTLS, err := pki.GeneratePKI(config.ZarfAgentHost)
		if err != nil {
			return nil, err
		}
		newState.AgentTLS = agentTLS
	}

	return &newState, nil
}

// DebugPrint takes a State struct, sanitizes sensitive fields, and prints them.
func DebugPrint(ctx context.Context, state *State) {
	if state == nil {
		return
	}
	// this is a shallow copy, nested pointers WILL NOT be copied
	oldState := *state
	sanitized := sanitizeState(&oldState)
	logger.From(ctx).Debug("debugPrintZarfState", "state", sanitized)
}

func sanitizeState(s *State) *State {
	// Overwrite the AgentTLS information
	s.AgentTLS.CA = []byte("**sanitized**")
	s.AgentTLS.Cert = []byte("**sanitized**")
	s.AgentTLS.Key = []byte("**sanitized**")

	// Overwrite the GitServer passwords
	s.GitServer.PushPassword = "**sanitized**"
	s.GitServer.PullPassword = "**sanitized**"

	// Overwrite the RegistryInfo passwords
	s.RegistryInfo.PushPassword = "**sanitized**"
	s.RegistryInfo.PullPassword = "**sanitized**"
	s.RegistryInfo.Secret = "**sanitized**"

	// Overwrite the ArtifactServer secret
	s.ArtifactServer.PushToken = "**sanitized**"

	return s
}

// DeployedPackageOptions are options for the DeployedPackage function
type DeployedPackageOptions func(*DeployedPackage)

// WithPackageNamespaceOverride sets the [ALPHA] optional namespace override for a package during deployment
func WithPackageNamespaceOverride(namespaceOverride string) DeployedPackageOptions {
	return func(o *DeployedPackage) {
		o.NamespaceOverride = namespaceOverride
	}
}

// DeployedPackage contains information about a Zarf Package that has been deployed to a cluster
// This object is saved as the data of a k8s secret within the 'Zarf' namespace (not as part of the ZarfState secret).
type DeployedPackage struct {
	Name               string               `json:"name"`
	Data               v1alpha1.ZarfPackage `json:"data"`
	CLIVersion         string               `json:"cliVersion"`
	Generation         int                  `json:"generation"`
	DeployedComponents []DeployedComponent  `json:"deployedComponents"`
	ConnectStrings     ConnectStrings       `json:"connectStrings,omitempty"`
	// [ALPHA] Optional namespace override - exported/json-tag for storage in deployed package state secret
	NamespaceOverride string `json:"namespaceOverride,omitempty"`
}

// GetSecretName returns the k8s secret name for the deployed package
func (d *DeployedPackage) GetSecretName() string {
	if d.NamespaceOverride != "" {
		// override keyword is used to help prevent collisions in secret name
		return fmt.Sprintf("%s-%s-override-%s", "zarf-package", d.Name, d.NamespaceOverride)
	}
	return fmt.Sprintf("%s-%s", "zarf-package", d.Name)
}

// ConnectString contains information about a connection made with Zarf connect.
type ConnectString struct {
	// Descriptive text that explains what the resource you would be connecting to is used for
	Description string `json:"description"`
	// URL path that gets appended to the k8s port-forward result
	URL string `json:"url"`
}

// ConnectStrings is a map of connect names to connection information.
type ConnectStrings map[string]ConnectString

// DeployedComponent contains information about a Zarf Package Component that has been deployed to a cluster.
type DeployedComponent struct {
	Name               string           `json:"name"`
	InstalledCharts    []InstalledChart `json:"installedCharts"`
	Status             ComponentStatus  `json:"status"`
	ObservedGeneration int              `json:"observedGeneration"`
}

// InstalledChart contains information about a Helm Chart that has been deployed to a cluster.
type InstalledChart struct {
	Namespace      string         `json:"namespace"`
	ChartName      string         `json:"chartName"`
	ConnectStrings ConnectStrings `json:"connectStrings,omitempty"`
}
