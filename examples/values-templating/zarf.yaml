kind: ZarfPackageConfig
metadata:
  name: values-templating
  description: Example nginx package to demonstrate Zarf Values templating
values:
  files:
    - values.yaml
# These consts and vars and are here to demonstrate go-templating with vars and constants.
constants:
  - name: EXAMPLE_CONST
    value: "foo"
variables:
  - name: EXAMPLE_VAR
    default: "bar"
components:
  - name: values-with-terraform
    description: Change a value in a regular file with a Zarf value. Set AWS_REGION variable to modify the file.
    required: true
    files:
      - source: simple-terraform.tf
        target: modified-terraform.tf
        # Enables go-templating within the file.
        template: true
    actions:
      onDeploy:
        after:
          # This command uses a templated Zarf cmd to return the SHASUM of the terraform file
          - cmd: ./zarf prepare sha256sum {{ .Values.terraform.path }}
            # Then sets the value to a new Value key
            setValues:
              - key: .terraform.shasum
                type: string
          # Print our newly-set Value
          - cmd: echo "Look, a new value! SHASUM={{ .Values.terraform.shasum }}"
          - cmd: cat {{ .Values.terraform.path }}
            setValues:
              - key: .terraform.content
                type: string

  # The following component deploys nginx to the cluster using the defined values
  - name: values-with-nginx
    description: "This component deploys the latest nginx version to the cluster"
    required: true
    images:
      # NOTE(mkcp): Pkgtemplates aren't implemented in Values & go-templating alpha
      - "nginx:latest"
    manifests:
      - name: values-with-nginx
        # Enables go-templating within the files.
        template: true
        files:
          - nginx-deployment.yaml
          - nginx-service.yaml
          - nginx-configmap.yaml

# YAML keys starting with `x-` are custom keys that are ignored by the Zarf CLI
# The `x-mdx` key is used to render the markdown content for https://docs.zarf.dev/ref/examples
x-mdx: |
  This example demonstrates how to define values in your package that will be templated across the manifests and charts your package uses during `zarf package deploy` and `zarf package remove` with `{{ .Values.<foo> }}` as well as package-level info like `{{ .Metadata.<bar> }}` and `{{ .Build.<baz> }}`.

  With these values and templating features, you can define values in the `zarf.yaml` file without having to set them manually in every manifest and chart.
