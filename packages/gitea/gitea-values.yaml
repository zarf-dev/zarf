persistence:
  storageClass: "###ZARF_STORAGE_CLASS###"
  claimName: "###ZARF_VAR_GIT_SERVER_EXISTING_PVC###"
  size: "###ZARF_VAR_GIT_SERVER_PVC_SIZE###"
  accessModes:
    - "###ZARF_VAR_GIT_SERVER_PVC_ACCESS_MODE###"
  create: ###ZARF_VAR_GIT_SERVER_CREATE_PVC###

replicaCount: ###ZARF_VAR_GIT_SERVER_REPLICA_COUNT###

gitea:
  admin:
    username: "###ZARF_GIT_PUSH###"
    password: "###ZARF_GIT_AUTH_PUSH###"
    email: "zarf@localhost"
  config:
    APP_NAME: "Zarf Gitops Service"
    server:
      DISABLE_SSH: true
      OFFLINE_MODE: true
      ROOT_URL: http://zarf-gitea-http.zarf.svc.cluster.local:3000
    database:
      DB_TYPE: sqlite3
      # Note that the init script checks to see if the IP & port of the database service is accessible, so make sure you set those to something that resolves as successful (since sqlite uses files on disk setting the port & ip won't affect the running of gitea).
      HOST: zarf-docker-registry.zarf.svc.cluster.local:5000
    security:
      INSTALL_LOCK: true
    service:
      DISABLE_REGISTRATION: ###ZARF_VAR_GIT_SERVER_DISABLE_REGISTRATION###
    repository:
      ENABLE_PUSH_CREATE_USER: true
      FORCE_PRIVATE: true
    session:
      PROVIDER: memory
    cache:
      ADAPTER: memory
    queue:
      TYPE: level
resources:
  requests:
    cpu: "###ZARF_VAR_GIT_SERVER_CPU_REQ###"
    memory: "###ZARF_VAR_GIT_SERVER_MEM_REQ###"
  limits:
    cpu: "###ZARF_VAR_GIT_SERVER_CPU_LIMIT###"
    memory: "###ZARF_VAR_GIT_SERVER_MEM_LIMIT###"

image:
  fullOverride: "###ZARF_CONST_GITEA_IMAGE###"
  rootless: true

postgresql-ha:
  enabled: false

redis-cluster:
  enabled: false

valkey-cluster:
  enabled: false

strategy:
  type: "Recreate"
